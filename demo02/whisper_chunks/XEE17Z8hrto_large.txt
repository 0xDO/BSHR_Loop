{"text": " Good morning everybody, David Shapiro here with a new video about GPT-3. So in this one, we are going to address a common problem that people have which is that GPT-3 will make stuff up. So this is called hallucinating or confabulation. Really from a neurological standpoint, it's actually confabulation because it's making up facts based on a few data points. It's not fully hallucinating, but some people call it hallucination. I call it confabulation. I was recently given a challenge where someone said that they were working on a problem of having a chatbot look at a patient's texts or graphs and it was just making up medications. Like you ask like what medication is grandma on and they'll just make stuff up. And I said oh that's an easy problem and they're like go on. And I said well so the way that humans do that is that if I ask you a question your brain will give you a signal, I have that answer or no, I don't have that answer. You get different brain waves depending on whether or not you know something. Because what happens is while you're talking with someone, every little clue that you're given, your brain is like going, you know, squirreling away trying to find where that information is stored. And if it gets a 404 not found error, you get that signal. So what we have to do is we have to train GPT-3 to recognize that it doesn't know something, that something is not present in a text. So I happen to have, whoops, I happen to have about, oh, how many is this? A whole bunch of medical texts. From a previous project. I have over 4,000 medical texts. We only need 200 to get started. So what I'm gonna do is I'm gonna go ahead and create a new repo. And we're gonna call this And we're going to call this medical question answering. OK. And we'll leave it public, add a readme, and a license MIT, because sharing is caring. Create repo, medical question answering, copy, get clone. So start brand new. Hot off the press. Contexts. So from this old one, we will just go ahead and copy in this information. Oh yeah, this folder contains like 50,000 contexts. This is like my default, like, hey, I want to train on a whole bunch of different scenarios. I scraped this data together from a whole bunch of different sources. Unfortunately, I didn't write them all down, which is bad, but I got them all from the internet. I got them from Kaggle, mostly Kaggle and Google datasets. So if you go to, while this is copying, let me just show you. So that way you know this thing, kaggle.com. So you go to kaggle.com slash datasets and then you can just do like medical. I was probably here, medical images, medical transcriptions, I think it was this one. 2300 unique values, maybe not. Anyways, this kind of thing. And then you can also go to datasets.google.com or maybe not, Google datasets. Data search, dataset search. Okay, here it is. And then you can just do like medical healthcare patient records for NLP. Yeah. So you can get all kinds of stuff here. You can also search for legal. Like if you want to fine tune something that's going to do like a lawyer bot. So yeah, those are your too far and away your best sources. Anyways, let me, this is taking a while, so let me pause this real quick and we'll get back. I'm not going to do anything, we're just going to pause, wait for this to finish. Okay, and we're back. We have finished. We've got a folder of 3,060 medical texts. I deleted the ones that were too big and too small. Some of them were like 18 kilobytes, which is 15,000 characters, too long to fit in a GPT-3 prompt. So the biggest one is now 3,800 characters, which is, that's on the bigger side. But then also on the smaller side, we've got 1200 characters. So I've already done a little bit of prompt engineering. So I apologize for not showing you that, but let me show you what I did. So here's the input or here's the instruction. The following is a patient chart, determine whether or not medications in parentheses were prescribed was, say were prescribed. And then, so I tested was a medication prescribed, yes or no. So basically we have to break this down into several cognitive tasks for creating the training data. Because GPT-3 is just a prediction machine. It does not have, I mean, it has the ability to do thousands of tasks, right? But unless you train it on which one to do, it's gonna get confused because it says, oh, I'm looking for medication, let me just spit it out. Yes. So what happens is, oh, also I turn the temperature down to zero. So if you turn the temperature down to zero, that means it becomes deterministic, meaning it will always spit out the same answer, which if you want just a yes or no answer, a temperature of zero is the way to go, because that'll also give you the most reliable performance. Okay, it says yes. Okay, then list medications prescribed. medications prescribed. Decadron. And so we see like okay what is that and oh look it's right there she is also on a short course of Decadron. Perfect. And then if we do a quick search for Decadron we see like used to treat conditions such as arthritis, blood hormone disorders, allergic reactions, skin disease. Wow, this can treat like everything. This is like a hypo spray for Star Trek, isn't it? This can, it's just like, oh, Dr. Crusher's like here, you're all better now. Okay, so it accurately said Dekadron. Excellent, we're off to a good start. But let's see what happens. Let me copy this because this is a good prompt. So if we just say, let's see, list any medications prescribed. So this doesn't always work. So in this case there was a medication prescribed, but if there isn't one, and we'll show you that in a second, it might not work. So in this case it's wrong because the morphine, sorry my voice kind of cracked, morphine? I sound a little bit like, I'm not gonna pick on anyone actually. Local conscious sedation with morphine and Versed. So that was during, so that's not a prescription. That is used during it, right? So you see it's like, okay, this isn't exactly right. We're looking for what has been prescribed. We're also going to do a few other questions. So like, let's see. Let's bring this back. So just showing you that depending on how you change the prompt, you get different results. The following is a patient chart, sorry, struggling, drink some water. Determine whether or not determine whether or not prognosis was given. Okay, was a prognosis given? Yes or no? Yes. Okay, what is the prognosis prognosis prognosis is excellent was that word used her prognosis is indeed excellent word for word okay This is indeed excellent. Word for word. Okay. So we would probably, in an ideal world, we'd want to capture this comment. But anyways, still, the fact of the matter is it is directly getting information. By breaking this problem into two tasks, we're making it better. What I'm going to do is I'll show you how to fine tune this so that that way you can just do it in one go. Although I guess there's nothing wrong with just having multiple prompts, because if you just do this and you do a search on the output, yes or no, then you can run it again. However, you will still get some variance. And if you fine-tune a model and you pick and choose the kinds of responses that you want, you'll get far better, more consistent results. So this is where fine-tuning really shines because fine-tuned models tend to be less creative and if you're just answering questions you don't want creativity. That's the whole point right confabulation or hallucination. So a little bit of neuroscience there are disorders out there where people will just confabulate everything. there where people will just confabulate everything. There was one story that I read, I think it was in Phantoms in the Brain, where a little girl was like, her IQ was super low, like she had severe mental handicaps, but she was verbally brilliant. Her brain just understood language. And so she would just confabulate entire stories about her life and she would tell these eloquent stories about this wonderful day that she had with her boyfriend and how he proposed on the banks of a river and it's like this is like an eight-year old girl. She has no idea what she's talking about. So her brain was just completely confabulating and if you read that passage in Phantoms in the Brain it almost looks like something that GPT-3 would spit out. So yeah, so GPT-3 has a neurological disorder where it just confabulates language. So we have to train it to have what is called information literacy or theory of mind. So I made another video talking about theory of mind where theory of mind is where you're consciously aware of what is in your head. So if you have theory of mind, you say, oh, I'm experiencing this emotion, or I have this knowledge, or I don't. GPT-3 doesn't have that by default. It doesn't know what it doesn't know, or it doesn't know what it knows. It has no idea. It has no mental index like you or I have. So what we have to do is we have to fine tune that in. So that's what we're gonna do next. So we're gonna have a few prompts. And so let's start cleaning this up. So we're gonna call this the context. We'll remove the rest of this, actually here, let's save that because that'll be a second one. Yeah. All right. So then we'll just remove the rest of this. So we'll call this one prompt boolean, and then we'll do medication. And then we'll say, all right, so then we'll do this. So assuming that it passes, we'll just leave this here. So that way, the rest, when we fine tune it, it'll say, okay, I'm supposed to give you a list. And then we'll say prompt list medication. Okay, so basically we're breaking the problem down into a bool, boolean, which is true or false, and then a list problem. So this is two separate cognitive tasks, but what we're going to do is we're going to fine tune a model to do both of those in one go. This is a relatively straightforward thing, so I have a very high degree of confidence that it will work. But we don't want to fine tune an entire model just to find medications. Sure, there's value in that, but the context that I was given for this problem was, imagine you've got an app on your phone that is meant to help you coordinate. It's like a single source of truth for your home care team, and it's also an interface with your professional care team. So say for instance, you know, grandma's sick, you've got 20 family members trying to look after her plus 20 doctors and nurses. You all need a single source of truth without having to call each other up. So the the problem here is like, okay, you need to just say like what medications is grandma on and it's got to go through like many many records right to figure that out because ideally you want to figure this out automatically as far as i know this is not commercially available yet this is still being like worked on i don't know anyways this is how i would approach it um okay so then what we'll do is we'll just take this base prompt and we'll go back to what I said, determine whether or not a prognosis was given. And then we will do the same thing here. Was a prognosis given? Yes or no. So we'll do prompt bool prognosis, prognosis. There we go. And then we will do this with that. And probably what I'll do is, I'll probably pause the video because some of this data, we would benefit from having someone manually look at this, but you know what, just for the sake of experimentation, no, I'm not going to manually clean it up. I'm going to test and see if I can do this whole thing automatically. Most of the videos that I've done up until this point have been with synthetic data sets. So this is the first one that will be with actual real-world data. So synthetic data sets are one thing, but real-world data is a whole other animal. So let's get rid of that. Okay, so medication, prognosis, let's do diagnosis as well. Diagnosis, was a diagnosis given. Prompt, bool, diagnosis. Prompt bool diagnosis and then diagnosis. What is the diagnosis? Yes. Prompt list diagnosis. Okay. And let's imagine, what's a fourth task that we could do with this? Prognosis, diagnosis, medication, tests. That was the other one. Because in a lot of these, in this case, no medical tests, no follow-up tests were ordered. So determine whether or not follow-up medical tests were ordered. So let's see. Was a follow... Let's see. Were follow- up tests ordered? Yes or no? Okay, in this case, no. Hmm. List follow up tests. CT scan. Wait, really? The patient will be subjected to it oh oh all right I was wrong it was right look at that look at that okay see GPT-3 smarter than me thank you GPT-3 I shouldn't make that voice. That's insensitive to people with speech impediments. Okay, so let's go. Let's go. Or as the young people to say LFG. Okay, so then we'll do context. We're follow up tests ordered, yes or no? Dang, dang. Now this will be list tests. And then what we'll do is we'll just copy that and then remove that. And we'll save this as prompt bool tests. Okay, there we have it. Okay, so now we've got eight prompts. Am I counting right? Yes, we've got eight different prompts that we are going to, that we're gonna do. I don't want to bore you to death with writing up a script that we'll just go through and do these so I'm gonna pause the video I'll write a script to generate this input and output and then we'll be back. Excuse me that'll just be less pressure on me and less boring for you. So time will pass and you will come back to see a finished script and we'll watch it run with generating some of these outputs for the training data and honestly, we're most of the way done already. The data, so as a senior data scientist, he jokes that he is senior both in experience and age, told me once, the hardest job for this is always getting the data. The second hardest job, now that we're in the realm of LLMs, is prompt engineering. Once you have the data and the prompt engineers, or engineered, you're 90% of the way done. Now it's just a matter of synthesizing it all and training the model, and away you go. So sit tight, we're almost done. Okay, I lied. It's not quite as straightforward as I promised. It happens. So basically what we have to do is we have to do some noodling to figure out how do we want the final product to look. And so what we're gonna do is we're gonna do just kind of like rough sketch. So this is what's called a mock-up. Like if you ever do Agile or whatever, you can use like crayons or whatever to design how you want a website to look. But you can do the same thing for data. So what I'm doing now is I'm planning how do I want the data to look and so the example will be prompt and so it'll be the end of the, oh yeah, I guess JSON-L is double quotes, not single quotes. And so then it'll be completion. And so what the completion will look like is either And so what the completion will look like is either none found or list of medications. So basically we're trying to kind of consolidate it down. And what I mean by that is if the Boolean comes back as no, then it's over. Then it's just the answer is none. If it comes back yes, then what we have to do is get that answer. We will have to record that as we go. So that'll be medical texts. So this will be another example in, oh wait, diagnosis or list or diagnosis. And then medications. And then we will say completion is none, found or list of meds. Okay, so this is the goal. And I guess actually, yeah, I think this is the format that JSONL follows. I always have the script generate it for me. Okay, so this is what we're trying to do. So since I got started, let me go ahead and show you where we're at. Okay, so this is super simple so far. This is my standard approach. So I've got a function, open file, save file. It's very straightforward. It's just reusable code. I've got a function, open file, save file. It's very straightforward. It's just reusable code. I've got another function to handle the GPT-3 completion. And what it does is it strips off any excess and then it also saves it out to a log file. Cause this is really helpful, especially since I've got a whole bunch of stuff running in the background that I'm not necessarily watching, it helps to be able to see what it actually spit out. So, let's see. Get the Boolean answer. And what we'll do here is... So, notice here it says it does the strip. So if it's no, then the answer is done. So let's actually go ahead and do result equals list. So this is where we'll accumulate the final data. Okay, so Boolean equals completion.lower. So if Boolean is yes, actually no, we'll say no, cause that's the easier answer. So if it's no, then we'll say info equals, So if it's no, then we'll say, info equals, actually we can just do result.append. And the answer will be, so let's say prompt equals, actually I should probably just go ahead and open this medical text since we're going to use it twice. Equals choice. Here let's break this up into several parts. File and then we'll say medical text equals and we'll just copy this out open file medical text okay read the medical file there we go okay and so if it's no, then we know that it's done. And so we'll say, so the final result will be percent S which allows us to swap out a variable and then we'll go new line, new line. And then we'll say, oh, I got to know which one it is. Hmm. Yeah, because of what I do is I have a list of Booleans, a list of folders here or files. So if it's diagnosis, okay, so here's what we can do. Yeah, gotcha. This will be fine. Where can I do this? I'll just do it here. So we'll call this the demark. So the demarkator is, let me show you what I mean by demark. So this right here is the demarkation. So this tells the model that the input is done, right? And it's time to do something else. Yep. So what I'll do is I'll do demarc equals filename.replace. And what we're replacing is this part with nothing. And we're also replacing the dot text at the end with nothing, and then we're gonna do upper. So that way, like, it'll end up with like, diagnosis, all caps, and medication, all caps, and prognosis, all caps, and tests, all caps and medication all caps and prognosis all caps and tests all caps. OK. So then the prompt what we'll do what I like to do is actually have. Have like. Have the instructions before and after. But let's try it without. I think it'll be fine. Okay, so also one advantage of having an all-caps demarcator is that it's very distinct. Like if you look at some of these medical contexts, if you see something in all caps it's very obvious. Oh, but this could be a problem. Yeah. Because it will have seen this token before, so it might mistakenly say like, oh, you're done. So this is the diagnosis. Let's think about this for a second. So we'll actually do, the prompt will be list all. And I think it'll be important to, so this will be like list all diagnosis or list all medication or list all prognosis or list all tests. Yeah, okay, so that will give us a much more unique demarcator. And so it'll know to look for the list all as well. Because this is also where it's helpful to include plain text instructions at the end of fine tuning data, especially for multiple tasks. Okay, so list all, and then we're gonna populate it with, the first one is gonna be the medical text, and the second one will be the DMARC. And so if you have $2S, so basically this says put the variable in this string as, or put this variable here as a string. So if it sees two, then you need to have a tuple. That's what this is called. Okay, so that's the prompt. It's populated. And and then the completion will be the boolean dot upper because we want it to just do the all caps thing. Okay so basically what this if the answer is no if whatever the question was is no, we're done. Just append the data and move on. If Boolean is yes, then we need another step. And so what we're gonna do is we're going to, we need to keep this medical file and the medical text. And so what we need to do is that we actually need to get another answer. So we'll say okay we actually need to get... so we're going to replace the file name. fileName equals fileName dot replace and we're going to replace the file name, file name equals file name dot replace. And we're gonna replace the bool with list. And so, cause what you see is like the diagnosis, this is part one, and then the list diagnosis is part two. So we're just gonna assume that this is what it looks like, but instead of having all this other junk around it, we just want the answer. What is the diagnosis? Sound good? Okay. And then also what we'll do is we will add, we'll add a space here. So that way there will be, actually no, I think you're supposed to have a space before. So we'll just do space plus. So basically what that'll do is it'll add a space between the answer and that last colon. I think that's the right way to do it. You could probably do both. Yeah, let's do both, why not? Okay, so we're replacing the file name. So we're gonna grab, if the answer is yes, the job isn't done, right? Yes, it's like, oh, there is, it is here. Okay, what is the diagnosis? Okay, so then we will want to do the same thing where prompt equals open file name context. So yeah, this will basically be the same where we just put the context back and we ask it again. Also, I wanna point out, I changed the temperature to zero because we want this to be deterministic. We don't want any creativity. Just give me the answer, yes or no. Let me add, update the prompt file name to find the answer. Okay, so then the completion, you get the list answer. Okay, and so then whatever this is, should be done now. We'll leave it, whatever it comes back with, upper, lower. So then we will do this. We'll copy this because it's mostly the same. But instead we'll say completion equals that plus completion. Okay, I think that's it. I think that'll do it. But what we should do is actually print this as we go so that we can actually see it. So let's split this out. This is why, so if you notice in my code, I tend to be very procedural. This is why, because yes, you can stack stuff up, but then it makes it harder to diagnose and print. So like print info. to diagnose and print. So like print info. And, oh, actually if it's not found, we know that it's no. So actually the completion should just be, and this is also why, completion should be none found. So we want something very specific there. Okay, print info, print result, that happened, okay. And then we'll do the same thing here. Info equals that. We'll print info and then we will, we will, brain, what are you doing? We will append the info. Sometimes my brain just says, what were we doing? Huh, huh, I want to do something else. I know you're probably thinking that's a sign of ADHD. Probably, whatever. Okay, I think this is good. Let's do it a quick test. I know you all like to see when things blow up. You like to see my diagnosis, my troubleshooting process. So let's do this. CD, what is this called? Medical Python generate. Well, there's your first problem. Medical texts. Oh, there's no comma there. Let's see, what line is this? Line 55. I only drive 55. Okay. Okay. Did you mean a literal? Sure. Oh, ha, there's a really important step I missed here. Did you catch it? You actually have to save your data. So what we'll do is with all the data there, all the stuff is gonna be saved. Actually, you know what? I have, we don't need these extraneous folders. Let me open a previous project and I'll just copy the function that I use to format the data. Cause this is kind of an all-in-one. With medical.jsonl as outfile for in result, json.i outfile, outf out file right slash n. That should be good. I think that's the same format. Yeah, cause this is prompt completion, prompt completion. Okay, so let's close that. Rapid prototyping, man. It's a special kind of drug. Okay. Rapid prototyping, man. It's a special kind of drug. Okay, Python generate data. And hey, look at that. Completion mesothelioma. That was fast. Chief complaint, I need refills. Why are you going so slow? So while that's running, we can also check our logs. Whoa, hold on, it is doing stuff, but it's not showing me. What's going on? The following is a patient chart, whether a diagnosis was given. What is the diagnosis? Am I grabbing the wrong prompts? It kind of looks like I am. Yeah, because this is jumping ahead. I have done something wrong. This always happens. The prompt is, open the file name. Hang on, we're going to need to open a few of these. Let's open a few in sequence because it should be one is 2344.9. Let's see, two, two, three, four, four, dot nine. Okay, so these two are one right after the other. What's it doing? Why isn't this working? I have done something seriously wrong. It's like it's... Let's do a little bit more, let's see, print. We're gonna say, we're gonna print out the medical file so that we can see that, and then we're gonna print out the Boolean. And so then we will do, We will do... We're also going to print out the file name. Oh, that's what's happening. I changed the file name and it's not reinitialized. Damn it. Okay, so what we need to do is do new file name. I bet that's what it was. So then we'll say file name. Yeah, because if you change it then it's only going to do the wrong one every time. Don't mess with your important variables when in the loop. Okay, I think I fixed it. I think it's good now. Python, generate data. Yes, yes, yes, yes, yes. These are all positives. Intramuscular lipoma, epidictomycady. Hey, if it's all yes, that's fine. I would like to see some that have no, but given the fact that these are medical records, there's probably going to be, well, child check, malnutrition, diagnosis yes. This is running, so rather than watch all the data go, I'll go ahead and pause the video and we'll explore the data once it's done. Let me just show you while it's running in the background. So we've got for file name and bools, so we've got four different prompts and we're going to do each one 50 times. And then, so we do a seed and then we do a random choice. So I've got up here, import random seed and choice. So out of those 3000 contexts, we're just gonna pick a random one every time. So that's better than doing shuffle or whatever. So we're gonna get 50 choices. This is also good because you don't wanna ask the same question against, like the same four questions against one medical text. You want to show different contexts with different questions because that forces GPT-3 to think a little bit harder. So that means we'll have 200 different samples to pull from. And then we'll look at the final data once it's done. from and then we'll look at the final data once it's done. And yeah, so like I said, we're almost there. Sit tight. I've made a critical mistake. I broke one of my own rules, which is you're supposed to save your work as you go. And this is why it got to the very end. Error name, JSON is not defined. That's fine. that's fine. Okay, so let's fix this real quick and then we'll run it again. Import JSON, and then what we wanna do is regardless of what the result is, we wanna save it. So we will, how should we name this? We'll probably just do, So we will, how should we name this? We'll probably just do, let's see, out file name equals, see how do I usually do it? We'll just say completion underscore that dot now we'll say, let's say data slash that out file name. Because if I got to this point and it blew up, I could have just merged it all together. But let's fix it, let's do it right. Save your data as you go. Actually, I suppose, you know what? I do have it saved. I've got it all saved in the GPT-3 logs. But rather than clean all this stuff up, let's just do it the right way. Let's just do it the right way. Let's just do it the right way. Right. And that should be enough as outfile. JSON.dump info to outfile. That should be good. Okay, this was self-inflicted, 100% self-inflicted. Let's run this again. Watching it run, it worked beautifully. Oh, wait, wait, wait, wait, wait. Yeah, I need a data file or folder. Yep, I probably said not found, or maybe I canceled it before. Ta-da, okay, so it should be saving. Yeah, look at that. Ta-da. So list all diagnosis. Completion laparoscopic cholecystectomy. Okay, so we're saving all the data there. It's kind of funny that I haven't used notepad++ always for JSON. Completion left plural effusion. Okay. Last time, I swear you can see it working. The data is here. It's accumulating. We've got 17 out of 200 done. So, all right, pausing the video one last time. And then I guess we have to do the fine-tuning test. And we're done. We are done with not the whole thing, but most of it. So let me show you. We now have 199 samples out here. Some of them say like none found. Let's see, list all tests. The patient will go home with Vicodin for pain and follow up post-operatively in the office where we will review the PATH report with her. That is a great output. Look at that. So that's not necessarily a test though. So okay, that's basically a follow up. This is another good reason that I should have followed my own rules, which is just accumulate the data separately, because then you can go through and manually fix these. So I'm not going to worry about that this time, but also what you can do is if you accumulate the data like this, you can run it multiple times. And so, because this is just 200 samples, but what if you want like 10,000 samples to train on? That'll be better. So yeah. So now I've got a separate function or a script just to format the data. So we'll do Python format. And that should create a little guy here called medical.jsonl. Why is it all in quotes? That's not right. Man, I'm having a rough day of it. Trying something new. Like I said, playing with real world data is a whole different animal. Oh, I think I know what I did right, because I didn't read it. I just read it as a string. So we actually don't need to do a JSON dump. We just need to out file write content plus n. So let's try this again. And then it should reload it. Yes. There we go. That looks right. Yeah, yeah. Okay. So then if we do a search for like none found, you see, it's got plenty of examples. So counter examples, it'll know to say none found. So here's another thing with fine tuning. you can have some errors in the training data like you know like that last one that I showed you I think it's the very last one yeah so the patient will go home with vicodin and pain because that's not really a test but because there's almost 200 other examples it will kind of like smooth that out it'll be like oh, oh, maybe that was the wrong answer. So now we've got fine tune. So because this is a relatively straightforward problem, I'm gonna try and fine tune it on Curie, which is 10 times cheaper to fine tune and use than DaVinci, which, so this is like, you know, operational costs. So let's go ahead and do Python fine tune.py, So let's go ahead and do Python fine tune.py, make sure it goes, file uploaded and it's pending. Okay. Pending. Okay, so we'll pause it one last time and once it's done, we'll go test it. It's almost over. Sorry this video is so long. All right, gang, it's almost over. Sorry this video is so long. All right gang, it's all done. The fine tune is done. Fine tune David Shapiro medical questions. So let's give it a test. Let's open up a random context. So we'll just completely random feet and hand cramping. So what we'll do is we'll just grab this one. Whoops, you don't need to see my Spotify and we will try each of those end points or each of those tasks. So list all medications, medications. And you see, I've got the temperature set to zero maximum length 256. Hmm. HIV, lots of HIV. That could be because we fine-tuned on Curie. That's funny. All right. But let's see, was this even used? Yes. It takes insulin, basitracin. But let's see, was this even used? Yes. Takes insulin, basitracin, yeah. Okay, so we'll call that a partial success. Again, this started on DaVinci and we fine-tuned it on Curie, so it might not work. Okay, list all tests. None specified. List all tests. None specified. Yeah. See, it's getting super, super repetitive. Yeah. Does the patient have HIV? Patient has a history of HIV for 21 years. Yeah, okay. But yeah, okay, so it was correct and then it said none specified. It's interesting that it keeps spitting out more. I'm wondering if that's just because we fine-tuned it on Curie. I'm not gonna worry about re-fine-tuning this. The data's out there. You can test it yourself on DaVinci. You can also just take the script and just run it again and get more data. Yeah, okay, so tests. Let's also shorten the output length to like 20. List all prognosis. So what did I do? Diagnosis, prognosis, medication. None found, none found, found, found, found. This thing is glitchy. Okay, so this, we'll say that this is only a mild success. So maybe this task is too complex for Curie. Yeah, okay. So I diagnosed this with broke. I diagnose you with dead. Okay, so Curie doesn't work. Don't waste your time on that. Let's try a different one just to see. So we'll grab another neighbor of this one. 4,000, actinic neoplasm. That sounds painful. Nan, why does it say nan? List all medication, wow, I misspelled it the same way. Okay, list all medication, maximum length 20, Bacitracin ointment, and then what is the Elman radiofrequency? Then shave excised for the upper dermal layer with the Elman radiofrequency wave unit. Interesting. I don't know if that's actually a medication but it looks like a process was done. 50% trike. Let's make this a little bit longer. Let's go 40. Okay. So yeah, it looks like a pretty definitive. Curie is not up to this task. List all diagnosis, enlarging skin neoplasm, actinic neoplasm left upper cheek, that's fine. And then we'll do prognosis. Oh, that's not bad. And then it starts repeating itself, yeah. And then what was it? Tests, let's call it test for a recheck. Yeah, okay, that's the same thing. Okay, I was hoping this would do better, but again, right at the last minute, I decided to try and experiment and run it on Curie. I think this is definitive that Curie is, probably with more training data, Curie could work better, because remember 200 is the minimum. So if I were to do this again, I would say, let's double, triple, quadruple the number of samples. Let's manually check the samples to make sure they're good. And then also let's try it on DaVinci. I will let you, the audience, try this because the scripts are here. So all you have to do is just run generate data and it will just accumulate more data in here because it'll pull from 3000 medical texts. And then, so you generate more data, then you format the data it'll replace the medical.json file so this is 503 kilobytes and then you run fine-tune and away you go. Thanks for watching this was really informative I hope you liked it and got a lot out of it", "chunks": [{"timestamp": [0.0, 5.56], "text": " Good morning everybody, David Shapiro here with a new video about GPT-3."}, {"timestamp": [5.56, 11.52], "text": " So in this one, we are going to address a common problem that people have which is that"}, {"timestamp": [11.52, 16.04], "text": " GPT-3 will make stuff up."}, {"timestamp": [16.04, 20.76], "text": " So this is called hallucinating or confabulation."}, {"timestamp": [20.76, 25.64], "text": " Really from a neurological standpoint, it's actually confabulation because it's making"}, {"timestamp": [25.64, 28.44], "text": " up facts based on a few data points."}, {"timestamp": [28.44, 33.24], "text": " It's not fully hallucinating, but some people call it hallucination."}, {"timestamp": [33.24, 35.64], "text": " I call it confabulation."}, {"timestamp": [35.64, 41.32], "text": " I was recently given a challenge where someone said that they were working on a problem of"}, {"timestamp": [41.32, 47.84], "text": " having a chatbot look at a patient's texts or graphs and it was"}, {"timestamp": [47.84, 51.8], "text": " just making up medications. Like you ask like what medication is grandma"}, {"timestamp": [51.8, 55.36], "text": " on and they'll just make stuff up. And I said oh that's an easy problem and they're"}, {"timestamp": [55.36, 62.98], "text": " like go on. And I said well so the way that humans do that is that if I ask you"}, {"timestamp": [62.98, 67.28], "text": " a question your brain will give you a signal, I have that"}, {"timestamp": [67.28, 72.64], "text": " answer or no, I don't have that answer. You get different brain waves depending on whether or not"}, {"timestamp": [72.64, 78.48], "text": " you know something. Because what happens is while you're talking with someone, every little clue"}, {"timestamp": [78.48, 85.96], "text": " that you're given, your brain is like going, you know, squirreling away trying to find where that information is stored."}, {"timestamp": [85.96, 90.84], "text": " And if it gets a 404 not found error, you get that signal."}, {"timestamp": [90.84, 95.88], "text": " So what we have to do is we have to train GPT-3 to recognize that it doesn't know something,"}, {"timestamp": [95.88, 98.44], "text": " that something is not present in a text."}, {"timestamp": [98.44, 105.0], "text": " So I happen to have, whoops, I happen to have about, oh, how many is this?"}, {"timestamp": [106.62, 108.48], "text": " A whole bunch of medical texts."}, {"timestamp": [109.94, 110.86], "text": " From a previous project."}, {"timestamp": [110.86, 113.02], "text": " I have over 4,000 medical texts."}, {"timestamp": [113.02, 115.18], "text": " We only need 200 to get started."}, {"timestamp": [115.18, 117.94], "text": " So what I'm gonna do is I'm gonna go ahead"}, {"timestamp": [117.94, 119.98], "text": " and create a new repo."}, {"timestamp": [121.92, 123.26], "text": " And we're gonna call this"}, {"timestamp": [130.28, 130.78], "text": " And we're going to call this medical question answering. OK."}, {"timestamp": [130.78, 136.24], "text": " And we'll leave it public, add a readme, and a license MIT,"}, {"timestamp": [136.24, 138.32], "text": " because sharing is caring."}, {"timestamp": [138.32, 149.36], "text": " Create repo, medical question answering, copy, get clone. So start brand new. Hot off the press. Contexts."}, {"timestamp": [150.0, 155.04], "text": " So from this old one, we will just go ahead and copy in this information."}, {"timestamp": [157.6, 163.52], "text": " Oh yeah, this folder contains like 50,000 contexts. This is like my default, like,"}, {"timestamp": [163.52, 165.84], "text": " hey, I want to train on a whole bunch"}, {"timestamp": [165.84, 171.12], "text": " of different scenarios. I scraped this data together from a whole bunch of different sources."}, {"timestamp": [171.12, 176.88], "text": " Unfortunately, I didn't write them all down, which is bad, but I got them all from the"}, {"timestamp": [176.88, 185.96], "text": " internet. I got them from Kaggle, mostly Kaggle and Google datasets. So if you go to, while this is copying, let me just show you."}, {"timestamp": [186.8, 190.3], "text": " So that way you know this thing, kaggle.com."}, {"timestamp": [191.34, 193.94], "text": " So you go to kaggle.com slash datasets"}, {"timestamp": [193.94, 195.9], "text": " and then you can just do like medical."}, {"timestamp": [195.9, 198.6], "text": " I was probably here, medical images,"}, {"timestamp": [198.6, 201.0], "text": " medical transcriptions, I think it was this one."}, {"timestamp": [203.36, 205.92], "text": " 2300 unique values, maybe not."}, {"timestamp": [205.92, 208.36], "text": " Anyways, this kind of thing."}, {"timestamp": [210.2, 214.88], "text": " And then you can also go to datasets.google.com"}, {"timestamp": [218.02, 220.96], "text": " or maybe not, Google datasets."}, {"timestamp": [221.96, 223.96], "text": " Data search, dataset search."}, {"timestamp": [223.96, 226.8], "text": " Okay, here it is. And then you can just do like medical"}, {"timestamp": [229.28, 234.72], "text": " healthcare patient records for NLP. Yeah. So you can get all kinds of stuff here."}, {"timestamp": [235.28, 239.92], "text": " You can also search for legal. Like if you want to fine tune something that's going to do like"}, {"timestamp": [239.92, 245.8], "text": " a lawyer bot. So yeah, those are your too far and away your best sources."}, {"timestamp": [245.8, 249.48], "text": " Anyways, let me, this is taking a while, so let me pause this real quick and we'll get"}, {"timestamp": [249.48, 250.48], "text": " back."}, {"timestamp": [250.48, 254.48], "text": " I'm not going to do anything, we're just going to pause, wait for this to finish."}, {"timestamp": [254.48, 257.12], "text": " Okay, and we're back."}, {"timestamp": [257.12, 259.28], "text": " We have finished."}, {"timestamp": [259.28, 263.4], "text": " We've got a folder of 3,060 medical texts."}, {"timestamp": [263.4, 266.3], "text": " I deleted the ones that were too big and too small."}, {"timestamp": [266.3, 268.22], "text": " Some of them were like 18 kilobytes,"}, {"timestamp": [268.22, 270.44], "text": " which is 15,000 characters,"}, {"timestamp": [270.44, 273.72], "text": " too long to fit in a GPT-3 prompt."}, {"timestamp": [273.72, 278.08], "text": " So the biggest one is now 3,800 characters,"}, {"timestamp": [278.08, 281.06], "text": " which is, that's on the bigger side."}, {"timestamp": [281.06, 283.4], "text": " But then also on the smaller side,"}, {"timestamp": [283.4, 285.0], "text": " we've got 1200 characters."}, {"timestamp": [286.46, 291.38], "text": " So I've already done a little bit of prompt engineering."}, {"timestamp": [291.38, 293.02], "text": " So I apologize for not showing you that,"}, {"timestamp": [293.02, 294.58], "text": " but let me show you what I did."}, {"timestamp": [294.58, 297.06], "text": " So here's the input or here's the instruction."}, {"timestamp": [297.06, 298.3], "text": " The following is a patient chart,"}, {"timestamp": [298.3, 301.08], "text": " determine whether or not medications"}, {"timestamp": [301.08, 304.74], "text": " in parentheses were prescribed was,"}, {"timestamp": [304.74, 306.4], "text": " say were prescribed."}, {"timestamp": [306.4, 309.92], "text": " And then, so I tested was a medication prescribed,"}, {"timestamp": [309.92, 311.22], "text": " yes or no."}, {"timestamp": [311.22, 313.2], "text": " So basically we have to break this down"}, {"timestamp": [313.2, 316.2], "text": " into several cognitive tasks"}, {"timestamp": [316.2, 318.26], "text": " for creating the training data."}, {"timestamp": [318.26, 322.2], "text": " Because GPT-3 is just a prediction machine."}, {"timestamp": [322.2, 323.92], "text": " It does not have,"}, {"timestamp": [323.92, 328.28], "text": " I mean, it has the ability to do thousands of tasks, right?"}, {"timestamp": [328.28, 330.88], "text": " But unless you train it on which one to do,"}, {"timestamp": [330.88, 333.28], "text": " it's gonna get confused because it says,"}, {"timestamp": [333.28, 335.04], "text": " oh, I'm looking for medication, let me just spit it out."}, {"timestamp": [335.04, 335.88], "text": " Yes."}, {"timestamp": [337.2, 340.24], "text": " So what happens is, oh, also I turn the temperature"}, {"timestamp": [340.24, 341.08], "text": " down to zero."}, {"timestamp": [341.08, 343.44], "text": " So if you turn the temperature down to zero,"}, {"timestamp": [343.44, 345.6], "text": " that means it becomes deterministic,"}, {"timestamp": [345.6, 351.36], "text": " meaning it will always spit out the same answer, which if you want just a yes or no answer,"}, {"timestamp": [351.36, 356.24], "text": " a temperature of zero is the way to go, because that'll also give you the most reliable"}, {"timestamp": [356.24, 362.88], "text": " performance. Okay, it says yes. Okay, then list medications prescribed."}, {"timestamp": [370.48, 376.4], "text": " medications prescribed. Decadron. And so we see like okay what is that and oh look it's right there she is also on a short course of Decadron. Perfect. And"}, {"timestamp": [376.4, 382.92], "text": " then if we do a quick search for Decadron we see like used to treat"}, {"timestamp": [382.92, 387.34], "text": " conditions such as arthritis, blood hormone disorders, allergic reactions, skin disease."}, {"timestamp": [387.34, 389.7], "text": " Wow, this can treat like everything."}, {"timestamp": [390.62, 393.72], "text": " This is like a hypo spray for Star Trek, isn't it?"}, {"timestamp": [393.72, 396.46], "text": " This can, it's just like, oh, Dr. Crusher's like here,"}, {"timestamp": [396.46, 398.04], "text": " you're all better now."}, {"timestamp": [398.04, 401.0], "text": " Okay, so it accurately said Dekadron."}, {"timestamp": [401.0, 402.92], "text": " Excellent, we're off to a good start."}, {"timestamp": [404.58, 407.0], "text": " But let's see what happens. Let me"}, {"timestamp": [407.0, 415.44], "text": " copy this because this is a good prompt. So if we just say, let's see,"}, {"timestamp": [415.68, 423.52], "text": " list any medications prescribed. So this doesn't always work. So in this case"}, {"timestamp": [423.52, 426.4], "text": " there was a medication prescribed,"}, {"timestamp": [426.4, 431.0], "text": " but if there isn't one, and we'll show you that in a second, it might not work."}, {"timestamp": [431.0, 437.56], "text": " So in this case it's wrong because the morphine, sorry my voice kind of"}, {"timestamp": [437.56, 441.52], "text": " cracked, morphine? I sound a little bit like, I'm not gonna pick on anyone"}, {"timestamp": [441.52, 445.84], "text": " actually. Local conscious sedation with morphine and Versed."}, {"timestamp": [445.84, 449.08], "text": " So that was during, so that's not a prescription."}, {"timestamp": [449.08, 450.9], "text": " That is used during it, right?"}, {"timestamp": [450.9, 452.94], "text": " So you see it's like, okay, this isn't exactly right."}, {"timestamp": [452.94, 456.2], "text": " We're looking for what has been prescribed."}, {"timestamp": [456.2, 461.08], "text": " We're also going to do a few other questions."}, {"timestamp": [461.08, 464.48], "text": " So like, let's see."}, {"timestamp": [465.92, 467.48], "text": " Let's bring this back."}, {"timestamp": [467.48, 470.1], "text": " So just showing you that depending on how you change"}, {"timestamp": [470.1, 472.32], "text": " the prompt, you get different results."}, {"timestamp": [472.32, 476.0], "text": " The following is a patient chart, sorry,"}, {"timestamp": [476.0, 477.7], "text": " struggling, drink some water."}, {"timestamp": [480.68, 482.2], "text": " Determine whether or not"}, {"timestamp": [492.44, 509.68], "text": " determine whether or not prognosis was given. Okay, was a prognosis given? Yes or no? Yes. Okay, what is the prognosis prognosis"}, {"timestamp": [513.04, 516.16], "text": " prognosis is excellent was that word used"}, {"timestamp": [519.04, 522.88], "text": " her prognosis is indeed excellent word for word"}, {"timestamp": [525.56, 532.16], "text": " okay This is indeed excellent. Word for word. Okay."}, {"timestamp": [532.16, 538.26], "text": " So we would probably, in an ideal world, we'd want to capture this comment."}, {"timestamp": [538.26, 550.56], "text": " But anyways, still, the fact of the matter is it is directly getting information. By breaking this problem into two tasks, we're making it better."}, {"timestamp": [550.56, 554.2], "text": " What I'm going to do is I'll show you how to fine tune this so that that way you can"}, {"timestamp": [554.2, 562.2], "text": " just do it in one go."}, {"timestamp": [562.2, 569.84], "text": " Although I guess there's nothing wrong with just having multiple prompts, because if you just do this and you do a search on the output, yes or no,"}, {"timestamp": [569.84, 576.4], "text": " then you can run it again. However, you will still get some variance. And if you fine-tune a model"}, {"timestamp": [576.4, 581.04], "text": " and you pick and choose the kinds of responses that you want, you'll get far better, more"}, {"timestamp": [581.04, 586.16], "text": " consistent results. So this is where fine-tuning really shines because fine-tuned"}, {"timestamp": [586.16, 591.92], "text": " models tend to be less creative and if you're just answering questions you don't want creativity."}, {"timestamp": [591.92, 598.16], "text": " That's the whole point right confabulation or hallucination. So a little bit of neuroscience"}, {"timestamp": [598.16, 602.8], "text": " there are disorders out there where people will just confabulate everything."}, {"timestamp": [604.48, 611.96], "text": " there where people will just confabulate everything. There was one story that I read, I think it was in Phantoms in the Brain, where a little"}, {"timestamp": [611.96, 620.04], "text": " girl was like, her IQ was super low, like she had severe mental handicaps, but she was"}, {"timestamp": [620.04, 621.52], "text": " verbally brilliant."}, {"timestamp": [621.52, 623.82], "text": " Her brain just understood language."}, {"timestamp": [623.82, 628.64], "text": " And so she would just confabulate entire stories about her life and she would tell these"}, {"timestamp": [628.64, 632.44], "text": " eloquent stories about this wonderful day that she had with her boyfriend and"}, {"timestamp": [632.44, 636.68], "text": " how he proposed on the banks of a river and it's like this is like an eight-year"}, {"timestamp": [636.68, 640.24], "text": " old girl. She has no idea what she's talking about. So her brain was just"}, {"timestamp": [640.24, 650.04], "text": " completely confabulating and if you read that passage in Phantoms in the Brain it almost looks like something that GPT-3 would spit out. So yeah, so"}, {"timestamp": [650.04, 653.92], "text": " GPT-3 has a neurological disorder where it just confabulates language. So we have"}, {"timestamp": [653.92, 658.64], "text": " to train it to have what is called information literacy or theory of mind."}, {"timestamp": [658.64, 662.66], "text": " So I made another video talking about theory of mind where theory of mind is"}, {"timestamp": [662.66, 666.26], "text": " where you're consciously aware of what is in your head."}, {"timestamp": [666.26, 670.76], "text": " So if you have theory of mind, you say, oh, I'm experiencing this emotion, or I have this"}, {"timestamp": [670.76, 672.24], "text": " knowledge, or I don't."}, {"timestamp": [672.24, 674.64], "text": " GPT-3 doesn't have that by default."}, {"timestamp": [674.64, 678.44], "text": " It doesn't know what it doesn't know, or it doesn't know what it knows."}, {"timestamp": [678.44, 679.44], "text": " It has no idea."}, {"timestamp": [679.44, 681.96], "text": " It has no mental index like you or I have."}, {"timestamp": [681.96, 684.24], "text": " So what we have to do is we have to fine tune that in."}, {"timestamp": [684.24, 686.08], "text": " So that's what we're gonna do next."}, {"timestamp": [687.38, 692.38], "text": " So we're gonna have a few prompts."}, {"timestamp": [692.7, 695.1], "text": " And so let's start cleaning this up."}, {"timestamp": [695.1, 698.94], "text": " So we're gonna call this the context."}, {"timestamp": [700.22, 702.94], "text": " We'll remove the rest of this, actually here,"}, {"timestamp": [702.94, 705.16], "text": " let's save that because that'll be a second one."}, {"timestamp": [707.44, 707.94], "text": " Yeah."}, {"timestamp": [710.8, 711.36], "text": " All right."}, {"timestamp": [711.36, 713.48], "text": " So then we'll just remove the rest of this."}, {"timestamp": [715.92, 723.64], "text": " So we'll call this one prompt boolean,"}, {"timestamp": [723.64, 725.0], "text": " and then we'll do medication."}, {"timestamp": [732.12, 733.62], "text": " And then we'll say,"}, {"timestamp": [742.88, 745.0], "text": " all right, so then we'll do this."}, {"timestamp": [745.08, 748.14], "text": " So assuming that it passes, we'll just leave this here."}, {"timestamp": [749.52, 752.52], "text": " So that way, the rest, when we fine tune it,"}, {"timestamp": [752.52, 754.96], "text": " it'll say, okay, I'm supposed to give you a list."}, {"timestamp": [756.24, 760.64], "text": " And then we'll say prompt list medication."}, {"timestamp": [760.64, 762.76], "text": " Okay, so basically we're breaking the problem down"}, {"timestamp": [762.76, 767.08], "text": " into a bool, boolean, which is true or false, and then a list problem."}, {"timestamp": [767.08, 771.3], "text": " So this is two separate cognitive tasks, but what we're going to do is we're going to fine"}, {"timestamp": [771.3, 774.82], "text": " tune a model to do both of those in one go."}, {"timestamp": [774.82, 778.94], "text": " This is a relatively straightforward thing, so I have a very high degree of confidence"}, {"timestamp": [778.94, 781.38], "text": " that it will work."}, {"timestamp": [781.38, 787.0], "text": " But we don't want to fine tune an entire model just to find medications."}, {"timestamp": [787.0, 792.0], "text": " Sure, there's value in that, but the context that I was given for this problem was,"}, {"timestamp": [792.0, 799.0], "text": " imagine you've got an app on your phone that is meant to help you coordinate."}, {"timestamp": [799.0, 802.0], "text": " It's like a single source of truth for your home care team,"}, {"timestamp": [802.0, 809.3], "text": " and it's also an interface with your professional care team. So say for instance, you know, grandma's sick, you've"}, {"timestamp": [809.3, 814.02], "text": " got 20 family members trying to look after her plus 20 doctors and nurses. You"}, {"timestamp": [814.02, 817.42], "text": " all need a single source of truth without having to call each other up. So"}, {"timestamp": [817.42, 821.98], "text": " the the problem here is like, okay, you need to just say like what medications"}, {"timestamp": [821.98, 830.32], "text": " is grandma on and it's got to go through like many many records right to figure that out because ideally you want to figure this out"}, {"timestamp": [830.32, 834.48], "text": " automatically as far as i know this is not commercially available yet this is still being"}, {"timestamp": [834.48, 841.28], "text": " like worked on i don't know anyways this is how i would approach it um okay so then what we'll do"}, {"timestamp": [842.0, 847.12], "text": " is we'll just take this base prompt and we'll go back to"}, {"timestamp": [847.12, 853.8], "text": " what I said, determine whether or not a prognosis was given."}, {"timestamp": [853.8, 862.68], "text": " And then we will do the same thing here."}, {"timestamp": [862.68, 863.68], "text": " Was a prognosis given?"}, {"timestamp": [863.68, 869.68], "text": " Yes or no. So we'll do prompt bool prognosis, prognosis."}, {"timestamp": [870.32, 871.16], "text": " There we go."}, {"timestamp": [872.12, 877.12], "text": " And then we will do this with that."}, {"timestamp": [879.24, 881.46], "text": " And probably what I'll do is,"}, {"timestamp": [890.0, 894.28], "text": " I'll probably pause the video because some of this data, we would benefit from having someone manually look at this, but you know what, just for the sake"}, {"timestamp": [894.28, 897.44], "text": " of experimentation, no, I'm not going to manually clean it up."}, {"timestamp": [897.44, 901.6], "text": " I'm going to test and see if I can do this whole thing automatically."}, {"timestamp": [901.6, 905.0], "text": " Most of the videos that I've done up until this point have been with synthetic data sets."}, {"timestamp": [905.0, 910.0], "text": " So this is the first one that will be with actual real-world data."}, {"timestamp": [910.0, 918.0], "text": " So synthetic data sets are one thing, but real-world data is a whole other animal."}, {"timestamp": [918.0, 927.48], "text": " So let's get rid of that. Okay, so medication, prognosis, let's do diagnosis as well."}, {"timestamp": [932.64, 937.64], "text": " Diagnosis, was a diagnosis given."}, {"timestamp": [941.52, 944.78], "text": " Prompt, bool, diagnosis."}, {"timestamp": [959.0, 961.0], "text": " Prompt bool diagnosis and then diagnosis. What is the diagnosis?"}, {"timestamp": [961.0, 963.18], "text": " Yes."}, {"timestamp": [963.18, 967.0], "text": " Prompt list diagnosis."}, {"timestamp": [967.0, 969.08], "text": " Okay."}, {"timestamp": [969.08, 973.56], "text": " And let's imagine, what's a fourth task that we could do with this?"}, {"timestamp": [973.56, 977.68], "text": " Prognosis, diagnosis, medication, tests."}, {"timestamp": [977.68, 978.68], "text": " That was the other one."}, {"timestamp": [978.68, 987.16], "text": " Because in a lot of these, in this case, no medical tests, no follow-up tests were ordered."}, {"timestamp": [987.16, 997.6], "text": " So determine whether or not follow-up medical tests were ordered."}, {"timestamp": [997.6, 1001.2], "text": " So let's see."}, {"timestamp": [1001.2, 1002.2], "text": " Was a follow..."}, {"timestamp": [1002.2, 1004.64], "text": " Let's see."}, {"timestamp": [1004.64, 1005.0], "text": " Were follow- up tests ordered?"}, {"timestamp": [1009.48, 1011.02], "text": " Yes or no?"}, {"timestamp": [1011.02, 1012.68], "text": " Okay, in this case, no."}, {"timestamp": [1014.84, 1015.86], "text": " Hmm."}, {"timestamp": [1017.26, 1021.88], "text": " List follow up tests."}, {"timestamp": [1023.66, 1024.9], "text": " CT scan."}, {"timestamp": [1024.9, 1034.62], "text": " Wait, really? The patient will be subjected to it oh oh all right"}, {"timestamp": [1034.62, 1040.86], "text": " I was wrong it was right look at that look at that okay see GPT-3 smarter than"}, {"timestamp": [1040.86, 1046.94], "text": " me thank you GPT-3 I shouldn't make that voice. That's insensitive to people with speech impediments."}, {"timestamp": [1046.94, 1050.3], "text": " Okay, so let's go."}, {"timestamp": [1050.3, 1051.14], "text": " Let's go."}, {"timestamp": [1054.26, 1056.76], "text": " Or as the young people to say LFG."}, {"timestamp": [1060.38, 1065.0], "text": " Okay, so then we'll do context."}, {"timestamp": [1066.12, 1068.92], "text": " We're follow up tests ordered, yes or no?"}, {"timestamp": [1071.64, 1075.28], "text": " Dang, dang."}, {"timestamp": [1076.16, 1079.94], "text": " Now this will be list tests."}, {"timestamp": [1081.16, 1084.2], "text": " And then what we'll do is we'll just copy that"}, {"timestamp": [1084.2, 1085.94], "text": " and then remove that."}, {"timestamp": [1085.94, 1090.68], "text": " And we'll save this as prompt bool tests."}, {"timestamp": [1091.7, 1093.7], "text": " Okay, there we have it."}, {"timestamp": [1093.7, 1096.5], "text": " Okay, so now we've got eight prompts."}, {"timestamp": [1096.5, 1097.5], "text": " Am I counting right?"}, {"timestamp": [1099.18, 1101.18], "text": " Yes, we've got eight different prompts"}, {"timestamp": [1101.18, 1108.28], "text": " that we are going to, that we're gonna do. I don't want to bore"}, {"timestamp": [1108.28, 1111.64], "text": " you to death with writing up a script that we'll just go through and do these"}, {"timestamp": [1111.64, 1116.24], "text": " so I'm gonna pause the video I'll write a script to generate this input and"}, {"timestamp": [1116.24, 1121.04], "text": " output and then we'll be back. Excuse me that'll just be less pressure on me and"}, {"timestamp": [1121.04, 1126.06], "text": " less boring for you. So time will pass and you will come back"}, {"timestamp": [1126.06, 1128.56], "text": " to see a finished script and we'll watch it run"}, {"timestamp": [1128.56, 1131.64], "text": " with generating some of these outputs for the training data"}, {"timestamp": [1131.64, 1134.12], "text": " and honestly, we're most of the way done already."}, {"timestamp": [1135.12, 1140.12], "text": " The data, so as a senior data scientist,"}, {"timestamp": [1140.56, 1144.32], "text": " he jokes that he is senior both in experience and age,"}, {"timestamp": [1144.32, 1147.1], "text": " told me once, the hardest job for this"}, {"timestamp": [1147.1, 1149.16], "text": " is always getting the data."}, {"timestamp": [1149.16, 1152.82], "text": " The second hardest job, now that we're in the realm of LLMs,"}, {"timestamp": [1152.82, 1154.18], "text": " is prompt engineering."}, {"timestamp": [1154.18, 1156.94], "text": " Once you have the data and the prompt engineers,"}, {"timestamp": [1156.94, 1160.08], "text": " or engineered, you're 90% of the way done."}, {"timestamp": [1160.08, 1162.08], "text": " Now it's just a matter of synthesizing it all"}, {"timestamp": [1162.08, 1164.22], "text": " and training the model, and away you go."}, {"timestamp": [1164.22, 1166.3], "text": " So sit tight, we're almost done."}, {"timestamp": [1168.44, 1169.28], "text": " Okay, I lied."}, {"timestamp": [1169.28, 1172.0], "text": " It's not quite as straightforward as I promised."}, {"timestamp": [1173.12, 1174.04], "text": " It happens."}, {"timestamp": [1174.04, 1175.96], "text": " So basically what we have to do"}, {"timestamp": [1175.96, 1178.04], "text": " is we have to do some noodling to figure out"}, {"timestamp": [1178.04, 1180.44], "text": " how do we want the final product to look."}, {"timestamp": [1181.24, 1183.96], "text": " And so what we're gonna do"}, {"timestamp": [1183.96, 1188.88], "text": " is we're gonna do just kind of like rough sketch."}, {"timestamp": [1188.88, 1190.84], "text": " So this is what's called a mock-up."}, {"timestamp": [1190.84, 1192.94], "text": " Like if you ever do Agile or whatever,"}, {"timestamp": [1192.94, 1195.34], "text": " you can use like crayons or whatever"}, {"timestamp": [1195.34, 1197.88], "text": " to design how you want a website to look."}, {"timestamp": [1197.88, 1199.56], "text": " But you can do the same thing for data."}, {"timestamp": [1199.56, 1201.1], "text": " So what I'm doing now is I'm planning"}, {"timestamp": [1201.1, 1228.0], "text": " how do I want the data to look and so the example will be prompt and so it'll be the end of the,"}, {"timestamp": [1230.72, 1231.8], "text": " oh yeah, I guess JSON-L is double quotes, not single quotes."}, {"timestamp": [1233.18, 1236.04], "text": " And so then it'll be completion."}, {"timestamp": [1240.02, 1243.12], "text": " And so what the completion will look like is either"}, {"timestamp": [1243.12, 1245.78], "text": " And so what the completion will look like is either"}, {"timestamp": [1246.84, 1252.8], "text": " none found"}, {"timestamp": [1254.84, 1257.92], "text": " or list of medications."}, {"timestamp": [1260.36, 1262.46], "text": " So basically we're trying to"}, {"timestamp": [1264.1, 1265.0], "text": " kind of consolidate it down."}, {"timestamp": [1265.0, 1270.0], "text": " And what I mean by that is if the Boolean comes back as"}, {"timestamp": [1270.0, 1275.0], "text": " no, then it's over. Then it's just the answer is none. If it comes back yes,"}, {"timestamp": [1275.0, 1280.0], "text": " then what we have to do is get that answer."}, {"timestamp": [1280.0, 1287.44], "text": " We will have to record that as we go. So that'll be medical texts."}, {"timestamp": [1287.44, 1289.48], "text": " So this will be another example in,"}, {"timestamp": [1291.68, 1295.68], "text": " oh wait, diagnosis or list or diagnosis."}, {"timestamp": [1300.64, 1303.16], "text": " And then medications."}, {"timestamp": [1305.12, 1309.56], "text": " And then we will say completion is none,"}, {"timestamp": [1314.6, 1318.28], "text": " found or list of meds."}, {"timestamp": [1319.28, 1321.88], "text": " Okay, so this is the goal."}, {"timestamp": [1321.88, 1324.92], "text": " And I guess actually, yeah,"}, {"timestamp": [1324.92, 1326.96], "text": " I think this is the format that JSONL follows."}, {"timestamp": [1326.96, 1330.64], "text": " I always have the script generate it for me. Okay, so this is what we're trying to do."}, {"timestamp": [1331.28, 1334.64], "text": " So since I got started, let me go ahead and show you where we're at."}, {"timestamp": [1335.36, 1340.48], "text": " Okay, so this is super simple so far. This is my standard approach. So I've got a function,"}, {"timestamp": [1340.48, 1346.44], "text": " open file, save file. It's very straightforward. It's just reusable code. I've got a function, open file, save file. It's very straightforward. It's just reusable code."}, {"timestamp": [1346.44, 1349.68], "text": " I've got another function to handle the GPT-3 completion."}, {"timestamp": [1349.68, 1352.88], "text": " And what it does is it strips off any excess"}, {"timestamp": [1354.88, 1358.92], "text": " and then it also saves it out to a log file."}, {"timestamp": [1358.92, 1360.2], "text": " Cause this is really helpful,"}, {"timestamp": [1360.2, 1361.8], "text": " especially since I've got a whole bunch of stuff"}, {"timestamp": [1361.8, 1363.4], "text": " running in the background"}, {"timestamp": [1363.4, 1365.52], "text": " that I'm not necessarily watching,"}, {"timestamp": [1365.52, 1368.8], "text": " it helps to be able to see what it actually spit out."}, {"timestamp": [1371.8, 1373.52], "text": " So, let's see."}, {"timestamp": [1374.64, 1376.88], "text": " Get the Boolean answer."}, {"timestamp": [1378.32, 1380.88], "text": " And what we'll do here is..."}, {"timestamp": [1384.44, 1385.0], "text": " So, notice here it says it does the strip."}, {"timestamp": [1387.26, 1392.26], "text": " So if it's no, then the answer is done."}, {"timestamp": [1392.54, 1396.44], "text": " So let's actually go ahead and do result equals list."}, {"timestamp": [1396.44, 1398.98], "text": " So this is where we'll accumulate the final data."}, {"timestamp": [1400.3, 1405.0], "text": " Okay, so Boolean equals completion.lower."}, {"timestamp": [1408.44, 1413.44], "text": " So if Boolean is yes, actually no, we'll say no,"}, {"timestamp": [1418.52, 1420.48], "text": " cause that's the easier answer."}, {"timestamp": [1420.48, 1424.48], "text": " So if it's no, then we'll say info equals,"}, {"timestamp": [1423.3, 1424.98], "text": " So if it's no, then we'll say,"}, {"timestamp": [1429.98, 1431.78], "text": " info equals, actually we can just do result.append."}, {"timestamp": [1435.14, 1439.44], "text": " And the answer will be, so let's say prompt equals,"}, {"timestamp": [1441.96, 1443.5], "text": " actually I should probably just go ahead"}, {"timestamp": [1443.5, 1448.74], "text": " and open this medical text since we're going to use it twice."}, {"timestamp": [1448.74, 1455.74], "text": " Equals choice."}, {"timestamp": [1455.74, 1459.1], "text": " Here let's break this up into several parts."}, {"timestamp": [1459.1, 1475.56], "text": " File and then we'll say medical text equals and we'll just copy this out open file medical text okay"}, {"timestamp": [1476.04, 1485.0], "text": " read the medical file there we go okay and so if it's no, then we know that it's done."}, {"timestamp": [1485.3, 1490.3], "text": " And so we'll say, so the final result will be percent S"}, {"timestamp": [1494.26, 1497.8], "text": " which allows us to swap out a variable"}, {"timestamp": [1497.8, 1500.9], "text": " and then we'll go new line, new line."}, {"timestamp": [1500.9, 1505.0], "text": " And then we'll say, oh, I got to know which one it is."}, {"timestamp": [1506.2, 1507.68], "text": " Hmm."}, {"timestamp": [1507.68, 1510.62], "text": " Yeah, because of what I do is I have a list of Booleans,"}, {"timestamp": [1510.62, 1512.78], "text": " a list of folders here or files."}, {"timestamp": [1512.78, 1517.14], "text": " So if it's diagnosis, okay, so here's what we can do."}, {"timestamp": [1519.64, 1520.88], "text": " Yeah, gotcha."}, {"timestamp": [1520.88, 1521.78], "text": " This will be fine."}, {"timestamp": [1523.86, 1525.68], "text": " Where can I do this?"}, {"timestamp": [1525.68, 1527.98], "text": " I'll just do it here."}, {"timestamp": [1531.0, 1535.2], "text": " So we'll call this the demark."}, {"timestamp": [1535.2, 1538.72], "text": " So the demarkator is, let me show you what I mean by demark."}, {"timestamp": [1538.72, 1542.08], "text": " So this right here is the demarkation."}, {"timestamp": [1542.08, 1546.46], "text": " So this tells the model that the input is done, right?"}, {"timestamp": [1546.46, 1548.92], "text": " And it's time to do something else."}, {"timestamp": [1552.2, 1553.04], "text": " Yep."}, {"timestamp": [1553.88, 1558.88], "text": " So what I'll do is I'll do demarc equals filename.replace."}, {"timestamp": [1560.66, 1564.42], "text": " And what we're replacing is this part"}, {"timestamp": [1565.0, 1569.92], "text": " with nothing."}, {"timestamp": [1574.46, 1577.56], "text": " And we're also replacing the dot text at the end with nothing, and then we're gonna do upper."}, {"timestamp": [1577.56, 1579.88], "text": " So that way, like, it'll end up with like,"}, {"timestamp": [1579.88, 1583.04], "text": " diagnosis, all caps, and medication, all caps,"}, {"timestamp": [1583.04, 1585.88], "text": " and prognosis, all caps, and tests, all caps and medication all caps and prognosis all caps and tests all caps."}, {"timestamp": [1586.6, 1592.92], "text": " OK. So then the prompt what we'll do what I like to do is actually have."}, {"timestamp": [1596.88, 1598.24], "text": " Have like."}, {"timestamp": [1599.36, 1601.48], "text": " Have the instructions before and after."}, {"timestamp": [1602.88, 1604.24], "text": " But let's try it without."}, {"timestamp": [1604.28, 1607.04], "text": " I think it'll be fine."}, {"timestamp": [1607.68, 1614.88], "text": " Okay, so also one advantage of having an all-caps demarcator is that it's very"}, {"timestamp": [1614.88, 1619.52], "text": " distinct. Like if you look at some of these"}, {"timestamp": [1619.52, 1624.24], "text": " medical contexts, if you see something in all caps it's"}, {"timestamp": [1624.24, 1627.28], "text": " very obvious. Oh, but this could be a problem."}, {"timestamp": [1628.72, 1638.32], "text": " Yeah. Because it will have seen this token before, so it might mistakenly"}, {"timestamp": [1640.48, 1645.08], "text": " say like, oh, you're done. So this is the diagnosis."}, {"timestamp": [1646.88, 1650.76], "text": " Let's think about this for a second."}, {"timestamp": [1655.52, 1657.88], "text": " So we'll actually do, the prompt will be list all."}, {"timestamp": [1660.04, 1662.0], "text": " And I think it'll be important to, so this will be like list all diagnosis"}, {"timestamp": [1662.0, 1666.36], "text": " or list all medication or list all prognosis"}, {"timestamp": [1666.36, 1667.66], "text": " or list all tests."}, {"timestamp": [1669.04, 1671.2], "text": " Yeah, okay, so that will give us"}, {"timestamp": [1671.2, 1673.16], "text": " a much more unique demarcator."}, {"timestamp": [1673.16, 1676.2], "text": " And so it'll know to look for the list all as well."}, {"timestamp": [1677.12, 1679.74], "text": " Because this is also where it's helpful"}, {"timestamp": [1679.74, 1682.2], "text": " to include plain text instructions"}, {"timestamp": [1682.2, 1683.78], "text": " at the end of fine tuning data,"}, {"timestamp": [1683.78, 1687.04], "text": " especially for multiple tasks."}, {"timestamp": [1687.04, 1689.22], "text": " Okay, so list all,"}, {"timestamp": [1689.22, 1691.56], "text": " and then we're gonna populate it with,"}, {"timestamp": [1692.72, 1697.4], "text": " the first one is gonna be the medical text,"}, {"timestamp": [1697.4, 1699.8], "text": " and the second one will be the DMARC."}, {"timestamp": [1701.86, 1704.92], "text": " And so if you have $2S,"}, {"timestamp": [1704.92, 1707.6], "text": " so basically this says put the variable in this string as,"}, {"timestamp": [1707.6, 1713.12], "text": " or put this variable here as a string. So if it sees two, then you need to have a"}, {"timestamp": [1713.12, 1734.2], "text": " tuple. That's what this is called. Okay, so that's the prompt. It's populated. And and then the completion will be the boolean dot upper because we want it to"}, {"timestamp": [1734.2, 1741.96], "text": " just do the all caps thing. Okay so basically what this if the answer is no"}, {"timestamp": [1741.96, 1746.98], "text": " if whatever the question was is no, we're done."}, {"timestamp": [1748.5, 1750.14], "text": " Just append the data and move on."}, {"timestamp": [1751.06, 1755.24], "text": " If Boolean is yes,"}, {"timestamp": [1755.24, 1757.6], "text": " then we need another step."}, {"timestamp": [1758.94, 1762.28], "text": " And so what we're gonna do is we're going to,"}, {"timestamp": [1764.28, 1767.32], "text": " we need to keep this medical file and the medical text."}, {"timestamp": [1767.32, 1774.32], "text": " And so what we need to do is that we actually need to get another answer. So"}, {"timestamp": [1774.32, 1782.0], "text": " we'll say okay we actually need to get... so we're going to replace the file name."}, {"timestamp": [1782.0, 1786.3], "text": " fileName equals fileName dot replace and we're going to replace the file name, file name equals file name dot replace."}, {"timestamp": [1786.3, 1789.8], "text": " And we're gonna replace the bool with list."}, {"timestamp": [1794.44, 1796.72], "text": " And so, cause what you see is like the diagnosis,"}, {"timestamp": [1796.72, 1800.24], "text": " this is part one, and then the list diagnosis is part two."}, {"timestamp": [1800.24, 1802.72], "text": " So we're just gonna assume that this is what it looks like,"}, {"timestamp": [1802.72, 1804.96], "text": " but instead of having all this other junk around it,"}, {"timestamp": [1804.96, 1805.9], "text": " we just want the answer."}, {"timestamp": [1805.9, 1807.3], "text": " What is the diagnosis?"}, {"timestamp": [1808.32, 1809.16], "text": " Sound good?"}, {"timestamp": [1809.16, 1810.8], "text": " Okay."}, {"timestamp": [1810.8, 1814.24], "text": " And then also what we'll do is we will add,"}, {"timestamp": [1817.32, 1818.42], "text": " we'll add a space here."}, {"timestamp": [1818.42, 1819.82], "text": " So that way there will be,"}, {"timestamp": [1821.68, 1824.8], "text": " actually no, I think you're supposed to have a space before."}, {"timestamp": [1824.8, 1828.36], "text": " So we'll just do space plus."}, {"timestamp": [1828.36, 1830.76], "text": " So basically what that'll do is it'll add a space"}, {"timestamp": [1830.76, 1835.18], "text": " between the answer and that last colon."}, {"timestamp": [1835.18, 1836.92], "text": " I think that's the right way to do it."}, {"timestamp": [1836.92, 1838.32], "text": " You could probably do both."}, {"timestamp": [1840.32, 1842.6], "text": " Yeah, let's do both, why not?"}, {"timestamp": [1842.6, 1845.28], "text": " Okay, so we're replacing the file name."}, {"timestamp": [1845.28, 1847.32], "text": " So we're gonna grab, if the answer is yes,"}, {"timestamp": [1847.32, 1848.6], "text": " the job isn't done, right?"}, {"timestamp": [1848.6, 1850.44], "text": " Yes, it's like, oh, there is, it is here."}, {"timestamp": [1850.44, 1852.5], "text": " Okay, what is the diagnosis?"}, {"timestamp": [1853.9, 1858.44], "text": " Okay, so then we will want to do the same thing"}, {"timestamp": [1859.32, 1863.42], "text": " where prompt equals open file name context."}, {"timestamp": [1863.42, 1865.92], "text": " So yeah, this will basically be the same"}, {"timestamp": [1865.92, 1868.44], "text": " where we just put the context back and we ask it again."}, {"timestamp": [1868.44, 1871.0], "text": " Also, I wanna point out, I changed the temperature to zero"}, {"timestamp": [1871.0, 1873.44], "text": " because we want this to be deterministic."}, {"timestamp": [1873.44, 1875.52], "text": " We don't want any creativity."}, {"timestamp": [1875.52, 1878.02], "text": " Just give me the answer, yes or no."}, {"timestamp": [1878.02, 1883.02], "text": " Let me add, update the prompt file name to find the answer."}, {"timestamp": [1886.5, 1889.46], "text": " Okay, so then the completion,"}, {"timestamp": [1894.78, 1896.12], "text": " you get the list answer."}, {"timestamp": [1897.72, 1901.98], "text": " Okay, and so then whatever this is, should be done now."}, {"timestamp": [1904.46, 1908.54], "text": " We'll leave it, whatever it comes back with, upper, lower."}, {"timestamp": [1908.54, 1911.02], "text": " So then we will do this."}, {"timestamp": [1912.9, 1915.1], "text": " We'll copy this because it's mostly the same."}, {"timestamp": [1919.2, 1929.0], "text": " But instead we'll say completion equals that plus completion."}, {"timestamp": [1932.2, 1933.8], "text": " Okay, I think that's it."}, {"timestamp": [1935.9, 1937.5], "text": " I think that'll do it."}, {"timestamp": [1938.7, 1945.0], "text": " But what we should do is actually print this as we go"}, {"timestamp": [1945.92, 1948.56], "text": " so that we can actually see it."}, {"timestamp": [1948.56, 1950.36], "text": " So let's split this out."}, {"timestamp": [1950.36, 1952.8], "text": " This is why, so if you notice in my code,"}, {"timestamp": [1952.8, 1954.48], "text": " I tend to be very procedural."}, {"timestamp": [1954.48, 1957.32], "text": " This is why, because yes, you can stack stuff up,"}, {"timestamp": [1957.32, 1962.08], "text": " but then it makes it harder to diagnose and print."}, {"timestamp": [1962.08, 1964.12], "text": " So like print info."}, {"timestamp": [1962.08, 1964.16], "text": " to diagnose and print. So like print info."}, {"timestamp": [1968.68, 1973.28], "text": " And, oh, actually if it's not found, we know that it's no."}, {"timestamp": [1973.28, 1976.4], "text": " So actually the completion should just be,"}, {"timestamp": [1976.4, 1981.4], "text": " and this is also why, completion should be none found."}, {"timestamp": [1983.92, 1988.92], "text": " So we want something very specific there. Okay, print info, print"}, {"timestamp": [1988.92, 1994.36], "text": " result, that happened, okay. And then we'll do the same thing here."}, {"timestamp": [1994.36, 2005.42], "text": " Info equals that. We'll print info and then we will,"}, {"timestamp": [2007.38, 2008.46], "text": " we will, brain, what are you doing?"}, {"timestamp": [2009.7, 2012.32], "text": " We will append the info."}, {"timestamp": [2014.24, 2016.78], "text": " Sometimes my brain just says, what were we doing? Huh, huh, I want to do something else."}, {"timestamp": [2016.78, 2019.6], "text": " I know you're probably thinking that's a sign of ADHD."}, {"timestamp": [2020.76, 2021.84], "text": " Probably, whatever."}, {"timestamp": [2022.7, 2024.74], "text": " Okay, I think this is good."}, {"timestamp": [2024.74, 2026.04], "text": " Let's do it a quick test."}, {"timestamp": [2026.04, 2028.88], "text": " I know you all like to see when things blow up."}, {"timestamp": [2028.88, 2031.76], "text": " You like to see my diagnosis,"}, {"timestamp": [2033.52, 2035.72], "text": " my troubleshooting process."}, {"timestamp": [2035.72, 2037.04], "text": " So let's do this."}, {"timestamp": [2037.04, 2038.32], "text": " CD, what is this called?"}, {"timestamp": [2038.32, 2041.4], "text": " Medical Python generate."}, {"timestamp": [2042.76, 2044.42], "text": " Well, there's your first problem."}, {"timestamp": [2044.42, 2047.68], "text": " Medical texts."}, {"timestamp": [2047.68, 2053.48], "text": " Oh, there's no comma there."}, {"timestamp": [2053.48, 2055.08], "text": " Let's see, what line is this?"}, {"timestamp": [2055.08, 2056.08], "text": " Line 55."}, {"timestamp": [2056.08, 2061.72], "text": " I only drive 55."}, {"timestamp": [2061.72, 2064.88], "text": " Okay."}, {"timestamp": [2064.88, 2065.0], "text": " Okay."}, {"timestamp": [2068.8, 2069.88], "text": " Did you mean a literal?"}, {"timestamp": [2069.88, 2070.72], "text": " Sure."}, {"timestamp": [2075.56, 2078.84], "text": " Oh, ha, there's a really important step I missed here."}, {"timestamp": [2078.84, 2079.88], "text": " Did you catch it?"}, {"timestamp": [2079.88, 2082.48], "text": " You actually have to save your data."}, {"timestamp": [2082.48, 2085.72], "text": " So what we'll do is with all the data there,"}, {"timestamp": [2085.72, 2087.04], "text": " all the stuff is gonna be saved."}, {"timestamp": [2087.04, 2088.54], "text": " Actually, you know what?"}, {"timestamp": [2088.54, 2093.12], "text": " I have, we don't need these extraneous folders."}, {"timestamp": [2093.12, 2095.28], "text": " Let me open a previous project"}, {"timestamp": [2097.62, 2100.1], "text": " and I'll just copy the function that I use"}, {"timestamp": [2100.1, 2102.94], "text": " to format the data."}, {"timestamp": [2102.94, 2113.44], "text": " Cause this is kind of an all-in-one."}, {"timestamp": [2124.56, 2125.0], "text": " With medical.jsonl as outfile for in result, json.i outfile, outf out file right slash n."}, {"timestamp": [2125.98, 2127.18], "text": " That should be good."}, {"timestamp": [2127.18, 2128.74], "text": " I think that's the same format."}, {"timestamp": [2129.98, 2132.32], "text": " Yeah, cause this is prompt completion,"}, {"timestamp": [2132.32, 2133.34], "text": " prompt completion."}, {"timestamp": [2135.2, 2137.0], "text": " Okay, so let's close that."}, {"timestamp": [2141.34, 2142.7], "text": " Rapid prototyping, man."}, {"timestamp": [2142.7, 2144.72], "text": " It's a special kind of drug."}, {"timestamp": [2146.68, 2151.18], "text": " Okay. Rapid prototyping, man. It's a special kind of drug. Okay, Python generate data."}, {"timestamp": [2153.72, 2155.94], "text": " And hey, look at that."}, {"timestamp": [2155.94, 2157.68], "text": " Completion mesothelioma."}, {"timestamp": [2157.68, 2158.58], "text": " That was fast."}, {"timestamp": [2163.72, 2176.14], "text": " Chief complaint, I need refills."}, {"timestamp": [2176.14, 2179.0], "text": " Why are you going so slow?"}, {"timestamp": [2179.0, 2182.56], "text": " So while that's running, we can also check our logs."}, {"timestamp": [2182.56, 2187.46], "text": " Whoa, hold on, it is doing stuff, but it's not showing me."}, {"timestamp": [2188.62, 2190.08], "text": " What's going on?"}, {"timestamp": [2192.88, 2194.26], "text": " The following is a patient chart,"}, {"timestamp": [2194.26, 2196.0], "text": " whether a diagnosis was given."}, {"timestamp": [2196.0, 2197.46], "text": " What is the diagnosis?"}, {"timestamp": [2204.24, 2208.54], "text": " Am I grabbing the wrong prompts?"}, {"timestamp": [2208.54, 2211.12], "text": " It kind of looks like I am."}, {"timestamp": [2211.12, 2217.4], "text": " Yeah, because this is jumping ahead."}, {"timestamp": [2217.4, 2220.2], "text": " I have done something wrong."}, {"timestamp": [2220.2, 2225.32], "text": " This always happens."}, {"timestamp": [2227.32, 2230.28], "text": " The prompt is, open the file name."}, {"timestamp": [2232.28, 2234.8], "text": " Hang on, we're going to need to open a few of these."}, {"timestamp": [2270.36, 2274.04], "text": " Let's open a few in sequence because it should be one is 2344.9. Let's see, two, two, three, four, four, dot nine. Okay, so these two are one right after the other."}, {"timestamp": [2274.04, 2282.8], "text": " What's it doing?"}, {"timestamp": [2282.8, 2284.28], "text": " Why isn't this working?"}, {"timestamp": [2284.28, 2289.92], "text": " I have done something seriously wrong."}, {"timestamp": [2289.92, 2304.44], "text": " It's like it's..."}, {"timestamp": [2304.44, 2305.0], "text": " Let's do a little bit more, let's see, print."}, {"timestamp": [2308.64, 2312.24], "text": " We're gonna say, we're gonna print out the medical file"}, {"timestamp": [2312.24, 2313.64], "text": " so that we can see that,"}, {"timestamp": [2313.64, 2315.74], "text": " and then we're gonna print out the Boolean."}, {"timestamp": [2318.56, 2321.14], "text": " And so then we will do,"}, {"timestamp": [2329.84, 2336.64], "text": " We will do... We're also going to print out the file name."}, {"timestamp": [2336.64, 2338.96], "text": " Oh, that's what's happening."}, {"timestamp": [2338.96, 2343.4], "text": " I changed the file name and it's not reinitialized."}, {"timestamp": [2343.4, 2351.36], "text": " Damn it. Okay, so what we need to do is do new"}, {"timestamp": [2351.36, 2361.2], "text": " file name. I bet that's what it was. So then we'll say file name. Yeah, because if"}, {"timestamp": [2361.2, 2365.84], "text": " you change it then it's only going to do the wrong one every time."}, {"timestamp": [2365.84, 2369.28], "text": " Don't mess with your important variables when in the loop."}, {"timestamp": [2369.28, 2371.56], "text": " Okay, I think I fixed it."}, {"timestamp": [2371.56, 2373.32], "text": " I think it's good now."}, {"timestamp": [2373.32, 2376.44], "text": " Python, generate data."}, {"timestamp": [2376.44, 2387.12], "text": " Yes, yes, yes, yes, yes."}, {"timestamp": [2387.12, 2389.76], "text": " These are all positives."}, {"timestamp": [2389.76, 2398.8], "text": " Intramuscular lipoma, epidictomycady."}, {"timestamp": [2398.8, 2405.44], "text": " Hey, if it's all yes, that's fine."}, {"timestamp": [2405.44, 2410.16], "text": " I would like to see some that have no, but given the fact that these are medical records,"}, {"timestamp": [2410.16, 2422.32], "text": " there's probably going to be, well, child check, malnutrition, diagnosis yes."}, {"timestamp": [2422.32, 2426.62], "text": " This is running, so rather than watch all the data go, I'll go ahead and pause the"}, {"timestamp": [2426.62, 2429.9], "text": " video and we'll explore the data once it's done."}, {"timestamp": [2429.9, 2432.5], "text": " Let me just show you while it's running in the background."}, {"timestamp": [2432.5, 2440.16], "text": " So we've got for file name and bools, so we've got four different prompts and we're going"}, {"timestamp": [2440.16, 2443.2], "text": " to do each one 50 times."}, {"timestamp": [2443.2, 2446.12], "text": " And then, so we do a seed and then we do a random choice."}, {"timestamp": [2446.12, 2449.48], "text": " So I've got up here, import random seed and choice."}, {"timestamp": [2449.48, 2451.7], "text": " So out of those 3000 contexts,"}, {"timestamp": [2451.7, 2454.0], "text": " we're just gonna pick a random one every time."}, {"timestamp": [2455.28, 2457.68], "text": " So that's better than doing shuffle or whatever."}, {"timestamp": [2457.68, 2459.32], "text": " So we're gonna get 50 choices."}, {"timestamp": [2459.32, 2461.64], "text": " This is also good because you don't wanna ask"}, {"timestamp": [2461.64, 2463.44], "text": " the same question against,"}, {"timestamp": [2463.44, 2472.56], "text": " like the same four questions against one medical text. You want to show different contexts with different questions"}, {"timestamp": [2472.56, 2477.76], "text": " because that forces GPT-3 to think a little bit harder. So that means we'll have 200 different"}, {"timestamp": [2479.12, 2483.36], "text": " samples to pull from. And then we'll look at the final data once it's done."}, {"timestamp": [2484.12, 2486.76], "text": " from and then we'll look at the final data once it's done. And yeah, so like I said, we're almost there."}, {"timestamp": [2487.86, 2488.7], "text": " Sit tight."}, {"timestamp": [2490.32, 2493.42], "text": " I've made a critical mistake."}, {"timestamp": [2494.88, 2495.96], "text": " I broke one of my own rules,"}, {"timestamp": [2495.96, 2498.38], "text": " which is you're supposed to save your work as you go."}, {"timestamp": [2498.38, 2501.52], "text": " And this is why it got to the very end."}, {"timestamp": [2501.52, 2503.8], "text": " Error name, JSON is not defined."}, {"timestamp": [2506.74, 2509.12], "text": " That's fine. that's fine."}, {"timestamp": [2509.12, 2510.8], "text": " Okay, so let's fix this real quick"}, {"timestamp": [2510.8, 2511.96], "text": " and then we'll run it again."}, {"timestamp": [2511.96, 2514.92], "text": " Import JSON, and then what we wanna do is"}, {"timestamp": [2514.92, 2519.68], "text": " regardless of what the result is, we wanna save it."}, {"timestamp": [2519.68, 2524.68], "text": " So we will, how should we name this?"}, {"timestamp": [2525.0, 2525.86], "text": " We'll probably just do, So we will, how should we name this?"}, {"timestamp": [2527.52, 2531.46], "text": " We'll probably just do,"}, {"timestamp": [2536.46, 2536.9], "text": " let's see, out file name equals,"}, {"timestamp": [2538.26, 2539.38], "text": " see how do I usually do it?"}, {"timestamp": [2544.38, 2565.0], "text": " We'll just say completion underscore that dot now we'll say,"}, {"timestamp": [2569.36, 2574.36], "text": " let's say data slash that out file name."}, {"timestamp": [2582.08, 2583.96], "text": " Because if I got to this point and it blew up,"}, {"timestamp": [2583.96, 2586.3], "text": " I could have just merged it all together."}, {"timestamp": [2586.3, 2588.2], "text": " But let's fix it, let's do it right."}, {"timestamp": [2588.2, 2590.04], "text": " Save your data as you go."}, {"timestamp": [2590.04, 2591.58], "text": " Actually, I suppose, you know what?"}, {"timestamp": [2591.58, 2593.04], "text": " I do have it saved."}, {"timestamp": [2593.04, 2595.36], "text": " I've got it all saved in the GPT-3 logs."}, {"timestamp": [2596.66, 2601.36], "text": " But rather than clean all this stuff up,"}, {"timestamp": [2605.08, 2606.28], "text": " let's just do it the right way. Let's just do it the right way."}, {"timestamp": [2606.28, 2608.44], "text": " Let's just do it the right way."}, {"timestamp": [2608.44, 2609.34], "text": " Right."}, {"timestamp": [2610.44, 2613.6], "text": " And that should be enough as outfile."}, {"timestamp": [2615.6, 2620.6], "text": " JSON.dump info to outfile."}, {"timestamp": [2625.8, 2626.8], "text": " That should be good."}, {"timestamp": [2629.0, 2633.18], "text": " Okay, this was self-inflicted, 100% self-inflicted."}, {"timestamp": [2634.4, 2635.44], "text": " Let's run this again."}, {"timestamp": [2636.76, 2638.72], "text": " Watching it run, it worked beautifully."}, {"timestamp": [2640.08, 2642.64], "text": " Oh, wait, wait, wait, wait, wait."}, {"timestamp": [2642.64, 2646.02], "text": " Yeah, I need a data file or folder."}, {"timestamp": [2649.18, 2654.06], "text": " Yep, I probably said not found,"}, {"timestamp": [2654.06, 2655.56], "text": " or maybe I canceled it before."}, {"timestamp": [2660.98, 2663.64], "text": " Ta-da, okay, so it should be saving."}, {"timestamp": [2664.66, 2666.0], "text": " Yeah, look at that."}, {"timestamp": [2669.0, 2671.0], "text": " Ta-da."}, {"timestamp": [2671.0, 2673.0], "text": " So list all diagnosis."}, {"timestamp": [2673.0, 2678.0], "text": " Completion laparoscopic cholecystectomy."}, {"timestamp": [2678.0, 2680.0], "text": " Okay, so we're saving all the data there."}, {"timestamp": [2680.0, 2685.76], "text": " It's kind of funny that I haven't used notepad++ always for JSON."}, {"timestamp": [2687.2, 2695.12], "text": " Completion left plural effusion. Okay. Last time, I swear you can see it working."}, {"timestamp": [2695.12, 2706.52], "text": " The data is here. It's accumulating. We've got 17 out of 200 done. So, all right, pausing the video one last time."}, {"timestamp": [2706.52, 2711.66], "text": " And then I guess we have to do the fine-tuning test."}, {"timestamp": [2711.66, 2713.24], "text": " And we're done."}, {"timestamp": [2713.24, 2716.52], "text": " We are done with not the whole thing, but most of it."}, {"timestamp": [2716.52, 2718.02], "text": " So let me show you."}, {"timestamp": [2718.02, 2725.16], "text": " We now have 199 samples out here."}, {"timestamp": [2725.16, 2728.44], "text": " Some of them say like none found."}, {"timestamp": [2728.44, 2729.44], "text": " Let's see, list all tests."}, {"timestamp": [2729.44, 2732.04], "text": " The patient will go home with Vicodin for pain and follow up post-operatively in the"}, {"timestamp": [2732.04, 2735.0], "text": " office where we will review the PATH report with her."}, {"timestamp": [2735.0, 2736.36], "text": " That is a great output."}, {"timestamp": [2736.36, 2737.36], "text": " Look at that."}, {"timestamp": [2737.36, 2739.88], "text": " So that's not necessarily a test though."}, {"timestamp": [2739.88, 2744.06], "text": " So okay, that's basically a follow up."}, {"timestamp": [2744.06, 2747.14], "text": " This is another good reason that I should have followed my own rules, which is just"}, {"timestamp": [2747.14, 2753.24], "text": " accumulate the data separately, because then you can go through and manually fix these."}, {"timestamp": [2753.24, 2757.8], "text": " So I'm not going to worry about that this time, but also what you can do is if you accumulate"}, {"timestamp": [2757.8, 2760.58], "text": " the data like this, you can run it multiple times."}, {"timestamp": [2760.58, 2764.52], "text": " And so, because this is just 200 samples, but what if you want like 10,000 samples to"}, {"timestamp": [2764.52, 2765.4], "text": " train on?"}, {"timestamp": [2765.4, 2766.36], "text": " That'll be better."}, {"timestamp": [2768.08, 2769.6], "text": " So yeah."}, {"timestamp": [2769.6, 2771.24], "text": " So now I've got a separate function"}, {"timestamp": [2771.24, 2772.96], "text": " or a script just to format the data."}, {"timestamp": [2772.96, 2775.6], "text": " So we'll do Python format."}, {"timestamp": [2775.6, 2779.16], "text": " And that should create a little guy here"}, {"timestamp": [2779.16, 2781.64], "text": " called medical.jsonl."}, {"timestamp": [2784.72, 2785.84], "text": " Why is it all in quotes?"}, {"timestamp": [2785.84, 2786.76], "text": " That's not right."}, {"timestamp": [2793.66, 2795.6], "text": " Man, I'm having a rough day of it."}, {"timestamp": [2795.6, 2796.44], "text": " Trying something new."}, {"timestamp": [2796.44, 2798.4], "text": " Like I said, playing with real world data"}, {"timestamp": [2798.4, 2799.92], "text": " is a whole different animal."}, {"timestamp": [2802.84, 2805.0], "text": " Oh, I think I know what I did right,"}, {"timestamp": [2806.36, 2807.76], "text": " because I didn't read it."}, {"timestamp": [2807.76, 2809.44], "text": " I just read it as a string."}, {"timestamp": [2810.52, 2813.16], "text": " So we actually don't need to do a JSON dump."}, {"timestamp": [2813.16, 2818.16], "text": " We just need to out file write content plus n."}, {"timestamp": [2822.2, 2823.48], "text": " So let's try this again."}, {"timestamp": [2824.88, 2829.04], "text": " And then it should reload it."}, {"timestamp": [2829.04, 2829.88], "text": " Yes."}, {"timestamp": [2831.2, 2832.04], "text": " There we go."}, {"timestamp": [2832.04, 2832.86], "text": " That looks right."}, {"timestamp": [2833.84, 2834.88], "text": " Yeah, yeah."}, {"timestamp": [2834.88, 2835.72], "text": " Okay."}, {"timestamp": [2835.72, 2838.76], "text": " So then if we do a search for like none found,"}, {"timestamp": [2838.76, 2840.88], "text": " you see, it's got plenty of examples."}, {"timestamp": [2840.88, 2843.72], "text": " So counter examples, it'll know to say none found."}, {"timestamp": [2843.72, 2850.56], "text": " So here's another thing with fine tuning. you can have some errors in the training data like you know like that last one that I"}, {"timestamp": [2850.56, 2854.8], "text": " showed you I think it's the very last one yeah so the patient will go home with vicodin and pain"}, {"timestamp": [2854.8, 2861.36], "text": " because that's not really a test but because there's almost 200 other examples it will kind"}, {"timestamp": [2861.36, 2866.16], "text": " of like smooth that out it'll be like oh, oh, maybe that was the wrong answer."}, {"timestamp": [2866.16, 2868.56], "text": " So now we've got fine tune."}, {"timestamp": [2868.56, 2871.4], "text": " So because this is a relatively straightforward problem,"}, {"timestamp": [2871.4, 2873.24], "text": " I'm gonna try and fine tune it on Curie,"}, {"timestamp": [2873.24, 2875.08], "text": " which is 10 times cheaper to fine tune"}, {"timestamp": [2875.08, 2877.26], "text": " and use than DaVinci,"}, {"timestamp": [2877.26, 2880.62], "text": " which, so this is like, you know, operational costs."}, {"timestamp": [2880.62, 2883.62], "text": " So let's go ahead and do Python fine tune.py,"}, {"timestamp": [2885.0, 2886.2], "text": " So let's go ahead and do Python fine tune.py,"}, {"timestamp": [2890.0, 2890.84], "text": " make sure it goes, file uploaded and it's pending. Okay."}, {"timestamp": [2894.64, 2895.48], "text": " Pending."}, {"timestamp": [2896.6, 2898.4], "text": " Okay, so we'll pause it one last time"}, {"timestamp": [2898.4, 2900.2], "text": " and once it's done, we'll go test it."}, {"timestamp": [2901.12, 2902.16], "text": " It's almost over."}, {"timestamp": [2902.16, 2903.84], "text": " Sorry this video is so long."}, {"timestamp": [2904.76, 2906.84], "text": " All right, gang, it's almost over. Sorry this video is so long. All right gang, it's all done."}, {"timestamp": [2908.76, 2911.04], "text": " The fine tune is done."}, {"timestamp": [2911.04, 2914.36], "text": " Fine tune David Shapiro medical questions."}, {"timestamp": [2914.36, 2917.4], "text": " So let's give it a test."}, {"timestamp": [2917.4, 2920.78], "text": " Let's open up a random context."}, {"timestamp": [2920.78, 2925.0], "text": " So we'll just completely random feet and hand cramping."}, {"timestamp": [2925.6, 2928.52], "text": " So what we'll do is we'll just grab this one."}, {"timestamp": [2928.52, 2930.84], "text": " Whoops, you don't need to see my Spotify"}, {"timestamp": [2930.84, 2933.7], "text": " and we will try each of those end points"}, {"timestamp": [2933.7, 2935.12], "text": " or each of those tasks."}, {"timestamp": [2935.12, 2938.8], "text": " So list all medications, medications."}, {"timestamp": [2942.66, 2944.56], "text": " And you see, I've got the temperature set to zero"}, {"timestamp": [2944.56, 2947.0], "text": " maximum length 256."}, {"timestamp": [2947.0, 2949.0], "text": " Hmm."}, {"timestamp": [2949.0, 2952.0], "text": " HIV, lots of HIV."}, {"timestamp": [2952.0, 2957.0], "text": " That could be because we fine-tuned on Curie."}, {"timestamp": [2957.0, 2958.0], "text": " That's funny."}, {"timestamp": [2958.0, 2959.0], "text": " All right."}, {"timestamp": [2959.0, 2962.0], "text": " But let's see, was this even used?"}, {"timestamp": [2962.0, 2964.0], "text": " Yes."}, {"timestamp": [2964.0, 2966.4], "text": " It takes insulin, basitracin. But let's see, was this even used? Yes."}, {"timestamp": [2970.18, 2973.44], "text": " Takes insulin, basitracin, yeah. Okay, so we'll call that a partial success."}, {"timestamp": [2973.44, 2976.84], "text": " Again, this started on DaVinci and we fine-tuned it on Curie,"}, {"timestamp": [2976.84, 2978.96], "text": " so it might not work."}, {"timestamp": [2978.96, 2981.6], "text": " Okay, list all tests."}, {"timestamp": [2984.96, 2985.0], "text": " None specified. List all tests."}, {"timestamp": [2986.46, 2990.32], "text": " None specified."}, {"timestamp": [2991.48, 2994.2], "text": " Yeah. See, it's getting super, super repetitive."}, {"timestamp": [2995.3, 2996.14], "text": " Yeah."}, {"timestamp": [2996.14, 2997.72], "text": " Does the patient have HIV?"}, {"timestamp": [3000.78, 3003.26], "text": " Patient has a history of HIV for 21 years."}, {"timestamp": [3003.26, 3004.1], "text": " Yeah, okay."}, {"timestamp": [3006.6, 3008.08], "text": " But yeah, okay, so it was correct"}, {"timestamp": [3008.08, 3009.68], "text": " and then it said none specified."}, {"timestamp": [3010.64, 3013.02], "text": " It's interesting that it keeps spitting out more."}, {"timestamp": [3013.02, 3015.62], "text": " I'm wondering if that's just because we fine-tuned it"}, {"timestamp": [3015.62, 3016.56], "text": " on Curie."}, {"timestamp": [3016.56, 3018.32], "text": " I'm not gonna worry about re-fine-tuning this."}, {"timestamp": [3018.32, 3019.16], "text": " The data's out there."}, {"timestamp": [3019.16, 3021.8], "text": " You can test it yourself on DaVinci."}, {"timestamp": [3021.8, 3024.0], "text": " You can also just take the script"}, {"timestamp": [3024.0, 3026.12], "text": " and just run it again and get more data."}, {"timestamp": [3027.22, 3029.8], "text": " Yeah, okay, so tests."}, {"timestamp": [3029.8, 3034.32], "text": " Let's also shorten the output length to like 20."}, {"timestamp": [3035.44, 3039.08], "text": " List all prognosis."}, {"timestamp": [3039.08, 3039.9], "text": " So what did I do?"}, {"timestamp": [3039.9, 3042.14], "text": " Diagnosis, prognosis, medication."}, {"timestamp": [3043.76, 3047.48], "text": " None found, none found, found, found, found."}, {"timestamp": [3047.48, 3048.48], "text": " This thing is glitchy."}, {"timestamp": [3048.48, 3056.72], "text": " Okay, so this, we'll say that this is only a mild success."}, {"timestamp": [3056.72, 3060.96], "text": " So maybe this task is too complex for Curie."}, {"timestamp": [3060.96, 3063.16], "text": " Yeah, okay."}, {"timestamp": [3063.16, 3065.0], "text": " So I diagnosed this with broke."}, {"timestamp": [3067.88, 3070.1], "text": " I diagnose you with dead."}, {"timestamp": [3070.1, 3071.64], "text": " Okay, so Curie doesn't work."}, {"timestamp": [3071.64, 3073.72], "text": " Don't waste your time on that."}, {"timestamp": [3073.72, 3076.64], "text": " Let's try a different one just to see."}, {"timestamp": [3076.64, 3080.24], "text": " So we'll grab another neighbor of this one."}, {"timestamp": [3080.24, 3084.16], "text": " 4,000, actinic neoplasm."}, {"timestamp": [3084.16, 3086.08], "text": " That sounds painful."}, {"timestamp": [3086.08, 3096.2], "text": " Nan, why does it say nan?"}, {"timestamp": [3096.2, 3105.96], "text": " List all medication, wow, I misspelled it the same way. Okay, list all medication, maximum length 20,"}, {"timestamp": [3108.32, 3118.2], "text": " Bacitracin ointment, and then what is the Elman radiofrequency? Then shave"}, {"timestamp": [3118.2, 3122.92], "text": " excised for the upper dermal layer with the Elman radiofrequency wave unit."}, {"timestamp": [3122.92, 3126.9], "text": " Interesting. I don't know if that's"}, {"timestamp": [3126.9, 3132.64], "text": " actually a medication but it looks like a process was done. 50% trike. Let's make"}, {"timestamp": [3132.64, 3138.84], "text": " this a little bit longer. Let's go 40. Okay. So yeah, it looks like a"}, {"timestamp": [3138.84, 3148.16], "text": " pretty definitive. Curie is not up to this task. List all diagnosis, enlarging skin neoplasm,"}, {"timestamp": [3148.16, 3152.02], "text": " actinic neoplasm left upper cheek, that's fine."}, {"timestamp": [3153.8, 3156.66], "text": " And then we'll do prognosis."}, {"timestamp": [3161.66, 3163.28], "text": " Oh, that's not bad."}, {"timestamp": [3163.28, 3165.38], "text": " And then it starts repeating itself, yeah."}, {"timestamp": [3166.48, 3168.96], "text": " And then what was it?"}, {"timestamp": [3168.96, 3173.46], "text": " Tests, let's call it test for a recheck."}, {"timestamp": [3173.46, 3175.28], "text": " Yeah, okay, that's the same thing."}, {"timestamp": [3175.28, 3179.2], "text": " Okay, I was hoping this would do better,"}, {"timestamp": [3179.2, 3180.98], "text": " but again, right at the last minute,"}, {"timestamp": [3180.98, 3184.14], "text": " I decided to try and experiment and run it on Curie."}, {"timestamp": [3184.14, 3188.36], "text": " I think this is definitive that Curie is,"}, {"timestamp": [3188.36, 3189.84], "text": " probably with more training data,"}, {"timestamp": [3189.84, 3190.84], "text": " Curie could work better,"}, {"timestamp": [3190.84, 3192.94], "text": " because remember 200 is the minimum."}, {"timestamp": [3193.94, 3195.76], "text": " So if I were to do this again,"}, {"timestamp": [3195.76, 3198.8], "text": " I would say, let's double, triple, quadruple"}, {"timestamp": [3198.8, 3200.52], "text": " the number of samples."}, {"timestamp": [3200.52, 3204.16], "text": " Let's manually check the samples to make sure they're good."}, {"timestamp": [3204.16, 3207.12], "text": " And then also let's try it on DaVinci."}, {"timestamp": [3207.12, 3209.02], "text": " I will let you, the audience, try this"}, {"timestamp": [3209.02, 3210.48], "text": " because the scripts are here."}, {"timestamp": [3210.48, 3214.32], "text": " So all you have to do is just run generate data"}, {"timestamp": [3214.32, 3217.08], "text": " and it will just accumulate more data in here"}, {"timestamp": [3217.08, 3220.8], "text": " because it'll pull from 3000 medical texts."}, {"timestamp": [3220.8, 3223.98], "text": " And then, so you generate more data,"}, {"timestamp": [3223.98, 3225.64], "text": " then you format the data it'll replace the"}, {"timestamp": [3225.64, 3230.24], "text": " medical.json file so this is 503 kilobytes and then you run fine-tune and"}, {"timestamp": [3230.24, 3235.88], "text": " away you go. Thanks for watching this was really informative I hope you liked it"}, {"timestamp": [3235.88, 3239.2], "text": " and got a lot out of it"}]}